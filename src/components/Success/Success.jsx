import React, { useState } from 'react';
import { z } from "zod";
import axios from 'axios';
import { Toaster, toast } from 'sonner';
import {
  CircleGradient,
  DarkContainer,
  DownloadButton,
  DownloadButtonArrow,
  DownloadYellowText,
  InputContainer,
  SuccessBlackText,
  SuccessContainer,
  SuccessInput,
  SuccessWhiteSubText,
  SuccessWhiteText,
} from './Success.styled';
import whiteArrow from '../../images/whiteArrow.png';

const formSchema = z.object({
  name: z.string().min(1, "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").max(50, "–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤"),
  contact: z
    .string()
    .min(1, "–ö–æ–Ω—Ç–∞–∫—Ç –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π")
    .regex(
      /^\+?[1-9]\d{1,14}$/,
      "–í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380123456789)"
    ),
  type: z.enum(["consultation", "other"]).default("consultation"),
});

const Success = () => {
  const [formData, setFormData] = useState({
    name: '',
    contact: '',
    type: "consultation",
  });

  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    const parseResult = formSchema.safeParse(formData);
    if (!parseResult.success) {
      parseResult.error.errors.forEach((err) =>
        toast.error(err.message)
      );
      return;
    }

    try {
      await axios.post("http://localhost:5000/send", formData);
      toast.success("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!");
      setFormData({
        name: "",
        contact: "",
        type: "consultation",
      });
    } catch (error) {
      console.error(error);
      toast.error("–£–ø—Å! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! üò¢");
    }
  };
  return (
    <SuccessContainer>
      <SuccessBlackText>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞</SuccessBlackText>
      <DarkContainer>
        <SuccessWhiteText>
          –ø–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –æ–Ω–ª–∞–π–Ω —Ç–∞ –º–∞–≥–∞–∑–∏–Ω—É —Å–µ–∫–æ–Ω–¥-—Ö–µ–Ω–¥.
        </SuccessWhiteText>
        <SuccessWhiteSubText>
          –ó—Ä–æ–∑—É–º—ñ—Ç–∏ —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–±–∏—Ç–∏, —ñ –ù–∞ —â–æ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –∑–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É
          –ø—Ä–∏ —Ç–æ—Ä–≥—ñ–≤–ª—ñ —Å–µ–∫–æ–Ω–¥-—Ö–µ–Ω–¥ —ñ –°—Ç–æ–∫. –ú–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –Ω–∞ –≤—Å—ñ –í–∞—à—ñ
          –ø–∏—Ç–∞–Ω–Ω—è —ñ –ø—ñ–¥—Å–∫–∞–∂–µ–º–æ –≤ —è–∫–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä—É—Ö–∞—Ç–∏—Å—å –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—ñ
          –¥–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –≤–∞—à–æ–≥–æ –æ–Ω–ª–∞–π–Ω —á–∏ –æ—Ñ–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω—É —Ç–∞
          –ø—Ä–æ–¥–∞–∂—ñ —á–µ—Ä–µ–∑ —Å–æ—Ü –º–µ—Ä–µ–∂—ñ.
        </SuccessWhiteSubText>
        <DownloadYellowText>–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é</DownloadYellowText>
        <form onSubmit={handleSubmit}>
          <InputContainer>
            <SuccessInput
              placeholder="—ñ–º‚Äô—è..."
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
            />
            <SuccessInput
              placeholder="–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É..."
              type="text"
              name="contact"
              value={formData.contact}
              onChange={handleChange}
            />
            <Toaster position="top-center" richColors />
            <DownloadButton type="submit">
              –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç
              <DownloadButtonArrow>
                <img src={whiteArrow} alt="dsad" />
              </DownloadButtonArrow>
            </DownloadButton>
          </InputContainer>
        </form>
      </DarkContainer>
      <CircleGradient />
    </SuccessContainer>
  );
};

export default Success;
